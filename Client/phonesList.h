#ifndef PHONESLIST_H
#define PHONESLIST_H

#include <QMainWindow>
#include <QListWidgetItem>
#include <qlocalsocket.h>
#include "showWindow.h"
#include "addEditWindow.h"
#include "class.h"

/*!
 * \file
 * \brief Заголовочный файл, содержащий класс окна вывода списка контактов
 *
 * В этом окне отображается список контактов, отсортированных по фамилии. По нажатию на запись открывается
 * окно отображения полной информации. Сверху находится строка поиска по ФИО/номеру, а снизу кнопку добавления нового контакта
 */

QT_BEGIN_NAMESPACE
namespace Ui { class PhonesList; }
class QLocalSocket;
QT_END_NAMESPACE

/*!
 * \brief Окно списка контактов
 *
 * В этом окне отображается список контактов, отсортированных по имени. По нажатию на элемент списка открывается
 * окно отображения полной информации о выбранном контакте. Сверху находится строка поиска по ФИО/номеру, а снизу
 * кнопку добавления нового контакта
 */
class PhonesList : public QMainWindow
{
    Q_OBJECT

public:
    PhonesList(QWidget *parent = nullptr);
    ~PhonesList();

private slots:
    /*!
     * \brief Слот чтения поступившей от сервера информации
     *
     * Вызывается при срабатывании сигнала readyRead(), т.е. при наличии информации, которую можно считать.
     *
     * Функция считывает сообщение и QMap phones, после чего проходит по каждой записи и выводит их на экран.
     * Если было передано сообщение, оно выводится в виде QErrorMessage.
     */
    void recievePhoneBook();

    /*!
     * \brief Слот обработки ошибок
     *
     * Вызывается при срабатывании сигнала при возникновении ошибки (LocalSocketError).
     *
     * Функция формирует и выводит на экран сообщение об ошибке.
     */
    void slotError(QLocalSocket::LocalSocketError error);

    /*!
     * \brief Слот обработки текста в строке поиска
     *
     * Вызывается при изменении текста в строке поиска
     *
     * Если строка не пуста, функция проверяет наличие валидатора. Валидатор отвечает за ограничение
     * ввода недопустимых символов в строку поиска. Если валидатор не установлен, он устонавливается в
     * соответсвии введенным первым символом. Если первый символ - цифра, далее возможен только ввод цифр,
     * если буква - только букв. Если введена не цифра и не буква, строка очищается.
     * Далее происходит вывод на экрнан записей, в которых встречается введенный текст. Если строка становится пустой,
     * валидатор убирается, выводится весь список контактов.
     */
    void on_searchBar_textChanged(const QString &text);

    /*!
     * \brief Слот обработки нажатия на контакт
     *
     * Вызывается при нажатии на контакт в списке контактов.
     *
     * Из строки извлекается ФИО+номер контакта, после чего происходит поиск по QMap phones.
     * Далее создается новое окно ShowWindow, в которое передается найденный контакт.
     */
    void on_phonesList_itemClicked(QListWidgetItem *item);

    /*!
     * \brief Слот обработки нажатия на кнопку
     *
     * Вызывается при нажатии на кнопку добавления контакта.
     *
     * Функция создает новое окно addNewNumber.
     */
    void on_addNumberButton_clicked();

private:
    //! Переменная для хранения размера получаемого от клиента блока
    quint16 nextBlockSize;

    /*!
     * \brief Контейнер, содержащий все записи из телефонной книги
     *
     * Основная структура, используемая для хранения контактов. В качестве клююча используется экземпляр класса KeyClass,
     * хранящий в себе оснвную информацию (ФИО+номер), уникальную для каждой записи. В качестве значения используется
     * экземпляр класса DataClass, хранящий дополнительную информацию о контакте.
     */
    QMap <KeyClass, DataClass> phones;

    //! Указатель на окно и все его виджеты
    Ui::PhonesList *ui;

    //! Указатель на сокет
    QLocalSocket *socket;

    //! Указатель на окно вывода информации о контакте
    ShowWindow *showWindow;

    //! Указатель на окно добавления/изменения контакта
    AddEditWindow *addEditWindow;
};
#endif // PHONESLIST_H
