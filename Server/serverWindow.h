#ifndef SERVERWINDOW_H
#define SERVERWINDOW_H

#include <QMainWindow>
#include "class.h"

/*!
 * \file
 * \brief Заголовочный файл, содержащий класс серверного окна
 */

QT_BEGIN_NAMESPACE
namespace Ui { class ServerWindow; }
class QLocalServer;
class QLocalSocket;
QT_END_NAMESPACE

/*!
 * \brief Окно сервера
 *
 * Используется для вывода на экран информации о состоянии сервера
 */
class ServerWindow : public QMainWindow
{
    Q_OBJECT

public:
    ServerWindow(QWidget *parent = nullptr);
    ~ServerWindow();

private slots:

    /*!
     * \brief Слот обработки нового клиентского подключения
     *
     * Вызывается при срабатывании сигнала newConnection(), т.е. при появлении нового подключения к сервру.
     *
     * Функция получает указатель на сокет нового подключения, выводит соответсвующее сообщение в лог и
     * посылает информации клиенту с помощью sendPhoneBookToClient().
     */
    void slotNewConnection();

    /*!
     * \brief Слот чтения поступившей от клиента информации
     *
     * Вызывается при срабатывании сигнала readyRead(), т.е. при наличии информации, которую можно считать.
     *
     * Функция получает указатель на сокет, посылающий информацию серверу, выводит соответсвующее сообщение в лог,
     * считывает посылаемые action_code, ключ и значение для QMap, а далее, в зависимости от полученного action_code,
     * выполняет либо удаление, либо добавление, либо редактирование списка контактов вызовом, соответсвенно,
     * tryToDel(), tryToAdd() или tryToEdit().
     */
    void clientReadSlot();

private:
    QString path;

    /*!
     * \brief Контейнер, содержащий все записи из телефонной книги
     *
     * Основная структура, используемая для хранения контактов. В качестве клююча используется экземпляр класса KeyClass,
     * хранящий в себе оснвную информацию (ФИО+номер), уникальную для каждой записи. В качестве значения используется
     * экземпляр класса DataClass, хранящий дополнительную информацию о контакте.
     */
    QMap <KeyClass, DataClass> phones;

    //! Переменная для хранения размера получаемого от клиента блока
    quint16 nextBlockSize;

    //! Указатель на окно и все его виджеты
    Ui::ServerWindow *ui;

    //! Указатель на сервер
    QLocalServer *server;

    /*!
     * \brief Метод отправки контактов клиенту
     * \param clientConnection Указатель на сокет клиента
     * \param message Строка, содеожащая комментарий, который нужно отправить клиенту
     *
     * Метод с помощью функции readCSV() считывает актуальную информацию из документа, обновляет информацию, хранящуюся в phones,
     * после чего осуществляет отправку актуальных данных и короткого сообщения о результате работы клиенту (если требуется).
     */
    void sendPhoneBookToClient(QLocalSocket *clientConnection, QString message);

    /*!
     * \brief Метод добавления нового контакта
     * \param key Указатель на объект типа KeyClass, содержащий основную информацию о добавляемом контакте
     * \param data Указатель на объект типа DataClass, содержащий дополнительную информацию о добавляемом контакте
     * \param socket Указатель на сокет клиента, от которого поступил запрос на добавление
     *
     * Метод проверяет, существует ли в QMap phones элемент с ключом key, если нет, открывает файл на запись, дописывает в конец
     * запись нового контакта, и вызывает sendPhoneBookToClient() с соответсвующим сообщением. Если же контакт с таким ФИО+номер
     * уже существует, sendPhoneBookToClient() отправляет сообщение об ошибке.
     */
    void tryToAdd(KeyClass& key, DataClass& data, QLocalSocket* socket);

    /*!
     * \brief Метод удаления контакта
     * \param key Указатель на объект типа KeyClass, по которму будет найдена запись, подлежащая удалению
     * \param socket Указатель на сокет клиента, от которого поступил запрос на удаление
     *
     * Метод проверяет, существует ли в QMap phones элемент с ключом key, если да, удаляет его, после чего
     * открывает файл на запись (с удалением содержимого), записывает туда записи из QMap phones
     * и вызывает sendPhoneBookToClient() с соответсвующим сообщением. Если же контакт с таким ФИО+номер
     * уже был удалён, sendPhoneBookToClient() отправляет сообщение об ошибке.
     */
    void tryToDel(KeyClass& key, QLocalSocket* socket);

    /*!
     * \brief Метод редактирования контакта
     * \param key Указатель на объект типа KeyClass, содержащий отредактированную информацию о контакте
     * \param data Указатель на объект типа DataClass, содержащий отредактированную информацию о контакте
     * \param originalPair Пара <KeyClass, DataClass>, отвечающая записи, которую необходимо отредактировать
     * \param socket Указатель на сокет клиента, от которого поступил запрос на редактирование
     *
     * Метод проверяет, существует ли в QMap phones элемент originalPair, если да, удаляет его, создает новый
     * откорректированный, перезаписывает файл в соответствии с новым списком контактов и вызывает sendPhoneBookToClient()
     * с соответсвующим сообщением. Если же контакт с таким ФИО+номер не существует, sendPhoneBookToClient() отправляет
     * сообщение об ошибке.
     */
    void tryToEdit(KeyClass& key, DataClass& data,
                   QPair <KeyClass, DataClass> originalPair, QLocalSocket* socket);
};
#endif // SERVERWINDOW_H
